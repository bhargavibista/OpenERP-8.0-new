# -*- encoding: utf-8 -*-
from osv import fields, osv
from tools.translate import _
class receive_goods(osv.osv_memory):
    _name = "receive.goods"
    _columns = {
    }
    def no_receive_goods(self,cr,uid,ids,context):
        return {'type': 'ir.actions.act_window_close'}
    def receive_goods(self,cr,uid,ids,context):
        obj_picking = self.pool.get('stock.picking')
        obj_stock_move = self.pool.get('stock.move')
        return_obj = self.pool.get('return.order')
        location_obj = self.pool.get('stock.location')
        if context.get('active_id'):
            obj_self = return_obj.browse(cr,uid,context.get('active_id'))
            if obj_self.receive:
                self.log(cr,uid,ids[0],'Goods Are already Received')
                return {'type': 'ir.actions.act_window_close'}
            if not obj_self.order_line:
                raise osv.except_osv(_('Error!'),  _('Please Insert Return Order lines'))
            source_location = obj_self.source_location
            source_id = location_obj.search(cr, uid, [('usage','=','customer')])
            if source_id:
                source_id = source_id[0]
            dest_id = source_location.id
            # below code is to find the destination location of one of the moves of the sales order
            # which has to be returned and use it as a source location for the sales return moves
            if obj_self.actual_linked_order:
                actual_sale_id = obj_self.actual_linked_order.id
                if actual_sale_id:
                    obj_self.write({'linked_sale_order':actual_sale_id})
            if obj_self.linked_sale_order:
                so_state = obj_self.linked_sale_order.state
                if so_state != 'done':
                    raise osv.except_osv(_('Warning!'),_('Products are not yet Shipped so you cannot do Incoming shipment'))
                source_picking = obj_picking.search(cr, uid, [('origin','=',obj_self.linked_sale_order.name)])
                if len(source_picking):
                    obj_stock_previous_move = obj_picking.browse(cr, uid, source_picking[0]).move_lines
                for each_move in obj_stock_previous_move:
                    source_id = each_move.location_dest_id.id
                    break
            # the code ends here for the source loation
            return_type = obj_self.return_type
            both_move = obj_self.ship_exchange_selection
            if not obj_self.linked_sale_order:
                origin = obj_self.name
            else:
                origin = obj_self.linked_sale_order.name
            order_details = {
                'origin' : origin,
                'type' : 'in',
                'address_id' : obj_self.partner_shipping_id.id,
                'return_id' : obj_self.id,
            }
            todo_moves= []
            if not obj_self.order_line:
                    raise osv.except_osv(_('Error !'),_('You cannot confirm a sale order which has no line.'))
            if return_type=='exchange':
                picking_exchange_out_id = False
                picking_exchange_in_id = False
                order_details['rma_return'] = obj_self.name +'/Exchange'
                picking_exchange_in_id = obj_picking.create(cr, uid, order_details) # incoming shipment for the return sales order
                if both_move=='ship_before': # this condition is used to check whether the user wants to generate the delivery order as well simultaneously
                    order_details_out = {
                        'origin' : origin,
                        'type' : 'out',
                        'address_id' : obj_self.partner_shipping_id.id,
                        'return_id' : obj_self.id,
                        'rma_return': obj_self.name +'/Exchange',
                        'sale_id':obj_self.linked_sale_order.id,
                        'carrier_id':obj_self.carrier_id.id
                    }
                    picking_exchange_out_id = obj_picking.create(cr, uid, order_details_out)
                for each_return_line in obj_self.order_line:
                    if not each_return_line.product_id:
                        continue
    #                if each_return_line.product_id.default_location.id:
    #                        dest_id = each_return_line.product_id.default_location.id
                    order_line_details = {
                        'product_id' : each_return_line.product_id.id,
                        'location_id' : source_id,
                        'location_dest_id' : dest_id,
                        'product_qty' : each_return_line.product_uom_qty,
                        'product_uom' : each_return_line.product_uom.id,
                        'name' : each_return_line.product_id.name,
                        'price_unit' : each_return_line.price_unit,
                        'picking_id' : picking_exchange_in_id,
    #                    'prodlot_id':each_return_line.serial_no.id,
                    }
                    return_move = obj_stock_move.create(cr, uid, order_line_details)
                    # below code is used to specify the serial number in the returned incoming shipment
                    serial_num = each_return_line.serial_no
                    serial_lot_id = False
                    if serial_num:
                        cr.execute("select id from stock_production_lot where name='%s'"%(serial_num))
                        serial_lot_data = cr.dictfetchone()
                        if serial_lot_data:
                            serial_lot_id = serial_lot_data['id']
                        else:
                            serial_lot_id = self.pool.get('stock.production.lot').create(cr, uid, {
                                'name' : serial_num,
                                'product_id' : each_return_line.product_id.id,
                            })
                    if return_move and serial_lot_id:
                        cr.execute('''
                            insert into stock_move_lot values(%s,%s)
                        '''%(return_move,serial_lot_id))
                    # code ends here
                    todo_moves.append(return_move)
                    if both_move=='ship_before': # this condition is used to check whether the user wants to generate the delivery order as well simultaneously
                        order_line_details.update({'location_id': dest_id,'location_dest_id': source_id,'picking_id':picking_exchange_out_id})
                        print "order line details",order_line_details
                        return_move = obj_stock_move.create(cr, uid, order_line_details)
                        print "return move",return_move
                        todo_moves.append(return_move)
                obj_stock_move.action_confirm(cr, uid, todo_moves)
    #            obj_stock_move.action_assign(cr, uid, todo_moves)
    #            obj_stock_move.force_assign(cr, uid, todo_moves)

    #            wf_service.trg_validate(uid, 'stock.picking', picking_exchange_in_id, 'button_confirm', cr)
                if picking_exchange_in_id:
                    obj_picking.draft_force_assign(cr,uid,[picking_exchange_in_id],context)
                    obj_picking.force_assign(cr,uid,[picking_exchange_in_id],context)
                if picking_exchange_out_id:
                    obj_picking.draft_force_assign(cr,uid,[picking_exchange_out_id],context)

                self.write(cr, uid,ids, {'state': 'progress'})

            if return_type=='car_return' or return_type=='30_day' or return_type =='destroy':
                picking_exchange_in_id = False
                if return_type=='car_return':
                    order_details['rma_return'] = obj_self.name +'/Credit_Return'
                elif return_type=='destroy':
                    order_details['rma_return'] = obj_self.name +'/Destroy'
                else:
                    order_details['rma_return'] = obj_self.name +'/'
                order_details['invoice_state'] = 'none'
                picking_exchange_in_id = obj_picking.create(cr, uid, order_details) # incoming shipment for the return sales order
                for each_return_line in obj_self.order_line:
                    if not each_return_line.product_id:
                        continue
    #                if each_return_line.product_id.default_location.id:
    #                    dest_id = each_return_line.product_id.default_location.id
                    order_line_details = {
                        'product_id' : each_return_line.product_id.id,
                        'location_id' : source_id,
                        'location_dest_id' : dest_id,
                        'product_qty' : each_return_line.product_uom_qty,
                        'product_uom' : each_return_line.product_uom.id,
                        'name' : each_return_line.product_id.name,
                        'price_unit' : each_return_line.price_unit,
                        'picking_id' : picking_exchange_in_id,
                    }
                    print "dest_id",order_line_details

                    return_move = obj_stock_move.create(cr, uid, order_line_details)
                    # below code is used to specify the serial number in the returned incoming shipment
                    serial_num = each_return_line.serial_no
                    serial_lot_id = False
                    if serial_num:
                        cr.execute("select id from stock_production_lot where name='%s'"%(serial_num))
                        serial_lot_data = cr.dictfetchone()
                        if serial_lot_data:
                            serial_lot_id = serial_lot_data['id']
                        else:
                            serial_lot_id = self.pool.get('stock.production.lot').create(cr, uid, {
                                'name' : serial_num,
                                'product_id' : each_return_line.product_id.id,
                            })

                    if return_move and serial_lot_id:
                        cr.execute('''
                            insert into stock_move_lot values(%s,%s)
                        '''%(return_move,serial_lot_id))
                    # code ends here
                    todo_moves.append(return_move)
                obj_stock_move.action_confirm(cr, uid, todo_moves)
    #            obj_stock_move.force_assign(cr, uid, todo_moves)
    #            wf_service.trg_validate(uid, 'stock.picking', picking_exchange_in_id, 'button_confirm', cr)
                if picking_exchange_in_id:
                    pick=obj_picking.browse(cr,uid,picking_exchange_in_id)
                    obj_picking.draft_force_assign(cr,uid,[picking_exchange_in_id],context)
                    obj_picking.force_assign(cr,uid,[picking_exchange_in_id],context)
                    obj_picking.test_assigned(cr,uid,[picking_exchange_in_id])
                    pick.action_assign_wkf()
#                    process = pick.action_process()
                    context['action_process_original'] = True ##Extra Line of Code
                    process = obj_picking.action_process(cr, uid, [pick.id], context=context)
                    context = process['context']
                    context['active_id']=ids[0]
                    res_id = process['res_id']
                    if res_id:
                        self.pool.get('stock.partial.picking').do_partial( cr, uid, [process['res_id']], context)
                        pick.action_done()
                if obj_self.manual_invoice_invisible:
                    state = 'done'
                else:
                    state = 'progress'
                return_obj.write(cr, uid,obj_self.id, {'state': state,'receive':True})
                return {'type': 'ir.actions.act_window_close'}
receive_goods()